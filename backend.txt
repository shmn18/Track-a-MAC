#!/usr/bin/python3
import easysnmp
from easysnmp import Session
from sqlite3 import Error
import sqlite3
import time
import datetime
import math 


vl = 'def_vlan(1)'

def probe_dev(ip, port, community, version, conn):
	oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
			'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
			'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
			'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
			'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
			'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
			'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
			'sysDescr':'1.1.3.6.1.2.1.1.1',
			'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
			'vlans':'1.3.6.1.2.1.17.7.1.4.3.1.4'}

	try:
		session = Session(hostname=ip, remote_port=port, version=version, community=community)
	except Exception as e:
		print(e)
		fail_attem = conn.execute("SELECT FAIL_ATTEM from info where IP=?, PORT=?",(ip,port))
		fail_attem += 1
		conn.execute("UPDATE info set FAIL_ATTEM=? where (IP=? and PORT=?)",(fail_attem,ip,port))
		conn.commit()
	start_time = str(datetime.datetime.now())
	try:
		mac_add = session.walk(oids['dot1dTpFdbEntryAddress'])
		port_info = session.walk(oids['dot1dTpFdbEntryPort'])
		for k,n in zip(mac_add, port_info):
			oid = k.oid;
			oid_index_place = k.oid_index;
			snmp_type=k.snmp_type;
			mac = ':'.join('{:02x}'.format(ord(a)) for a in k.value)
			port_no = n.value
		  
			data = conn.execute("SELECT * from List where (PORT=? and IP=?)",(port_no,ip))
			gather_data = data.fetchall()
			for mac_add_connection in gather_data:
				k = mac_add_connection[3]
			if len(gather_data) == 0:
				conn.execute('''INSERT INTO List(IP, VLANs, PORT, MACS) values (?,?,?,?)''',(ip,vl,port_no,mac))
				conn.commit()
			elif len(gather_data) == 1 and k.find(mac) == -1:
				mac_res = k + "," + mac
				conn.execute("UPDATE List set MACS=? where PORT=?",(mac_res,port_no))
				conn.commit()
		no_of_vlan = []
		name_vlan = []
		vlans = session.walk(oids['vlans'])
		index_vlan = session.walk(oids['dot1qVlanStaticName'])
		stor_values = []
		oids_vlan = []
		for index, vlan in zip(index_vlan, vlans):
			value = ':'.join('{:02x}'.format(ord(x)) for x in vlan.value)
			stor_values = value.split(':')
			oid = vlan.oid
			oids_vlan.append(oid)
			name_vlan = index.value
			count_vlan = oid.split('.')
			number_vlan = str(count_vlan[-1])
			join = ''
			if name_vlan != vl :
				start=0
				while start < (len(stor_values)):
					list_hex = stor_values
					hexmac = list_hex[start]
					scale = 16
					no_of_bits = 8
					hex_org = bin(int(hexmac, scale))[2:].zfill(no_of_bits)
					join += str(hex_org)
					hex_org = ''
					vlans_list = list(join)
					start =start+1
				another=0
				for i in range(len(vlans_list)):
					if vlans_list[i] == '1':
						num = i + 1
						name_vlan.append(str(name_vlan) + '(' + number_vlan + ')')
						no_of_vlan.append(num)
		res_f=0
		while res_f < (len(no_of_vlan)):
			vlan_port = '1'
			conn.execute("UPDATE List set VLANs = ? where PORT=?", (name_vlan[res_f],no_of_vlan[res_f]))
			conn.commit()
			res_f += 1
	except Exception as e:
		print(str(e)+' '+str(ip)+":"+str(port))
	last_time = str(datetime.datetime.now())

	conn.execute("UPDATE info set FIRST_PROBE=?, LATEST_PROBE=? where (IP=? and PORT=?)",(start_time, last_time, ip, port))
	conn.commit()


while True:
	conn = None
	conn = sqlite3.connect('mydatabase.db')

	if conn:
		information = conn.execute('Select * from info')
		for items in information:
			ip = items[0]; port=int(items[1]); community=items[2]; version=int(items[3])
			probe_dev(ip, port, community,version, conn)

		conn.close()

	time.sleep(60)
